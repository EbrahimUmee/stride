syntax = "proto3";

package stride.auction;

import "google/protobuf/any.proto";
import "stride/auction/bid.proto";
import "stride/auction/params.proto";
import "stride/auction/properties.proto";


option go_package = "github.com/Stride-Labs/stride/v5/x/auction/types";

/* ****************************************************************************
An AuctionPool is a combination of an address which holds assets and rules 
that any auctions for those assets would be restricted to follow.  It is like
a potential auction defining the bounds of what is allowed.

In contrast, an Auction is a specific instance which is either running now
or completed in the past, for a specific amount, with specific param settings. 
Auction contains fields which are common across all different auction types

But depending on the algorithm which the auction is running, there are some
algorithm specific parameters.


RedemptionRate is important to what a bid means -- if it is exactly 0, then
the price is a ratio the bidder is willing to pay between the auctionDenom
and the bidDenom.  If RR is any other number then the RR represents the fixed
rate which auctionDenom trades against bidDenom and the price is an additional
marginal price the bidder is willing to pay in order to get to exchange at this
known fixed rate.  If the order is partially filled, this additional price will
proportionally also be charged.

The marginal model is "I will pay Price to convert Volume A to B at fixed RR"
The ratio model is "I will convert Volume A into B at Price ratio of A to B"

**************************************************************************** */

enum AuctionState {
  COMPLETE = 0;
  RUNNING = 1;
  REVEAL = 2;
  PAYOUT = 3;
}

// An Auction is a specific auction for a specific target asset and supply 
// even if the supply in the address of the pool changes during that time
// Depending on the algorithm chosen there are different specific params

// English style auction specific parameters
// Starts low with increasing bids, auction ends if no new bids occur 
// for endDuration blocks in a row and goes to current winner
// When a higher bid comes in, the lastBlock is set now + endDuration
message AscendingAuction {
  AuctionState status = 1;
  AscendingAuctionProperties auctionProperties = 2;
  AuctionPoolProperties poolProperties = 3;
  uint64 lastBlock = 4;
  repeated OpenBid bids = 5;
}

// Dutch style auction specific parameters
// Starts high at startingBid, moves bid down bidStepSize each
// bidStepDuration blocks until someone is willing to bid and win
message DescendingAuction {
  AuctionState status = 1;
  DescendingAuctionProperties auctionProperties = 2;
  AuctionPoolProperties poolProperties = 3;
  uint64 currentSupply = 4;
  uint64 currentBid = 5;
  uint64 nextStep = 6;
  repeated OpenBid bids = 7;
}

// Sealed Bid style auction specific parameters
// Auction is open for sealed bids from firstBlock to lastBlock
// after last block but before revealBlock, bidders reveal unsealed bids
message SealedBidAuction {
  AuctionState status = 1;
  SealedBidAuctionProperties auctionProperties = 2;
  AuctionPoolProperties poolProperties = 3;
  uint64 firstBlock = 4;
  uint64 lastBlock = 5;
  uint64 revealBlock = 6;
  repeated SealedBid sealedBids = 7;
  repeated OpenBid revealedBids = 8;
}

// Would be more elegant if protobuf had a nice way to do interfaces but
// the algorithm is used to determine which one of the optional fields is set
message Auction {
  AuctionType algorithm = 1;
  optional AscendingAuction ascendingAuction = 2;
  optional DescendingAuction descendingAuction = 3;
  optional SealedBidAuction sealedBidAuction = 4;
}

// Auction Pool has an address with some assets and restrictions on the types
// of auctions which can be run for this pool.
message AuctionPool {
  uint64 id = 1;
  AuctionPoolProperties poolProperties = 2;
  Auction latestAuction = 8;
}

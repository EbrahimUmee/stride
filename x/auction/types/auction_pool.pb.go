// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/auction/auction_pool.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AuctionPool struct {
	Id              uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PoolName        string `protobuf:"bytes,2,opt,name=poolName,proto3" json:"poolName,omitempty"`
	PoolAddress     string `protobuf:"bytes,3,opt,name=poolAddress,proto3" json:"poolAddress,omitempty"`
	AvailableSupply uint64 `protobuf:"varint,4,opt,name=availableSupply,proto3" json:"availableSupply,omitempty"`
	AuctionType     string `protobuf:"bytes,5,opt,name=auctionType,proto3" json:"auctionType,omitempty"`
	MinimumBid      uint64 `protobuf:"varint,6,opt,name=minimumBid,proto3" json:"minimumBid,omitempty"`
	FirstBlock      uint64 `protobuf:"varint,7,opt,name=firstBlock,proto3" json:"firstBlock,omitempty"`
	LastBlock       uint64 `protobuf:"varint,8,opt,name=lastBlock,proto3" json:"lastBlock,omitempty"`
	RevealBlock     uint64 `protobuf:"varint,9,opt,name=revealBlock,proto3" json:"revealBlock,omitempty"`
}

func (m *AuctionPool) Reset()         { *m = AuctionPool{} }
func (m *AuctionPool) String() string { return proto.CompactTextString(m) }
func (*AuctionPool) ProtoMessage()    {}
func (*AuctionPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7c158d68ebb3589, []int{0}
}
func (m *AuctionPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuctionPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuctionPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuctionPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionPool.Merge(m, src)
}
func (m *AuctionPool) XXX_Size() int {
	return m.Size()
}
func (m *AuctionPool) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionPool.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionPool proto.InternalMessageInfo

func (m *AuctionPool) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AuctionPool) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *AuctionPool) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

func (m *AuctionPool) GetAvailableSupply() uint64 {
	if m != nil {
		return m.AvailableSupply
	}
	return 0
}

func (m *AuctionPool) GetAuctionType() string {
	if m != nil {
		return m.AuctionType
	}
	return ""
}

func (m *AuctionPool) GetMinimumBid() uint64 {
	if m != nil {
		return m.MinimumBid
	}
	return 0
}

func (m *AuctionPool) GetFirstBlock() uint64 {
	if m != nil {
		return m.FirstBlock
	}
	return 0
}

func (m *AuctionPool) GetLastBlock() uint64 {
	if m != nil {
		return m.LastBlock
	}
	return 0
}

func (m *AuctionPool) GetRevealBlock() uint64 {
	if m != nil {
		return m.RevealBlock
	}
	return 0
}

func init() {
	proto.RegisterType((*AuctionPool)(nil), "stride.auction.AuctionPool")
}

func init() { proto.RegisterFile("stride/auction/auction_pool.proto", fileDescriptor_e7c158d68ebb3589) }

var fileDescriptor_e7c158d68ebb3589 = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xc1, 0x4a, 0xfb, 0x30,
	0x1c, 0xc7, 0x97, 0xfe, 0xf7, 0x9f, 0x5b, 0x06, 0x13, 0x72, 0x0a, 0x22, 0xa1, 0x7a, 0xea, 0xc5,
	0x56, 0x10, 0x1f, 0x60, 0x3d, 0x8a, 0x88, 0x6c, 0x9e, 0xbc, 0x48, 0xda, 0x44, 0x0d, 0xa6, 0x4b,
	0x68, 0xd2, 0x62, 0xdf, 0xc2, 0xb7, 0xf0, 0x55, 0x3c, 0xee, 0xe8, 0x51, 0xda, 0x17, 0x91, 0xa6,
	0xdd, 0x56, 0x3c, 0xf5, 0xd7, 0xcf, 0x27, 0xf9, 0x26, 0xe4, 0x0b, 0xcf, 0x8c, 0xcd, 0x05, 0xe3,
	0x11, 0x2d, 0x52, 0x2b, 0xd4, 0x66, 0xf7, 0x7d, 0xd2, 0x4a, 0xc9, 0x50, 0xe7, 0xca, 0x2a, 0xb4,
	0xe8, 0x96, 0x84, 0xbd, 0x3a, 0xff, 0xf4, 0xe0, 0x7c, 0xd9, 0xcd, 0xf7, 0x4a, 0x49, 0xb4, 0x80,
	0x9e, 0x60, 0x18, 0xf8, 0x20, 0x18, 0xaf, 0x3c, 0xc1, 0xd0, 0x09, 0x9c, 0xb6, 0xbb, 0xef, 0x68,
	0xc6, 0xb1, 0xe7, 0x83, 0x60, 0xb6, 0xda, 0xff, 0x23, 0x1f, 0xce, 0xdb, 0x79, 0xc9, 0x58, 0xce,
	0x8d, 0xc1, 0xff, 0x9c, 0x1e, 0x22, 0x14, 0xc0, 0x63, 0x5a, 0x52, 0x21, 0x69, 0x22, 0xf9, 0xba,
	0xd0, 0x5a, 0x56, 0x78, 0xec, 0xa2, 0xff, 0xe2, 0x36, 0xab, 0xbf, 0xd2, 0x43, 0xa5, 0x39, 0xfe,
	0xdf, 0x65, 0x0d, 0x10, 0x22, 0x10, 0x66, 0x62, 0x23, 0xb2, 0x22, 0x8b, 0x05, 0xc3, 0x13, 0x17,
	0x33, 0x20, 0xad, 0x7f, 0x16, 0xb9, 0xb1, 0xb1, 0x54, 0xe9, 0x1b, 0x3e, 0xea, 0xfc, 0x81, 0xa0,
	0x53, 0x38, 0x93, 0x74, 0xa7, 0xa7, 0x4e, 0x1f, 0x40, 0x7b, 0x7e, 0xce, 0x4b, 0x4e, 0x65, 0xe7,
	0x67, 0xce, 0x0f, 0x51, 0x7c, 0xf3, 0x55, 0x13, 0xb0, 0xad, 0x09, 0xf8, 0xa9, 0x09, 0xf8, 0x68,
	0xc8, 0x68, 0xdb, 0x90, 0xd1, 0x77, 0x43, 0x46, 0x8f, 0x97, 0x2f, 0xc2, 0xbe, 0x16, 0x49, 0x98,
	0xaa, 0x2c, 0x5a, 0xbb, 0xe7, 0xbd, 0xb8, 0xa5, 0x89, 0x89, 0xfa, 0x36, 0xca, 0xeb, 0xe8, 0x7d,
	0x5f, 0x89, 0xad, 0x34, 0x37, 0xc9, 0xc4, 0x95, 0x71, 0xf5, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x9a,
	0x90, 0x5c, 0xe1, 0xb1, 0x01, 0x00, 0x00,
}

func (m *AuctionPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuctionPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuctionPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RevealBlock != 0 {
		i = encodeVarintAuctionPool(dAtA, i, uint64(m.RevealBlock))
		i--
		dAtA[i] = 0x48
	}
	if m.LastBlock != 0 {
		i = encodeVarintAuctionPool(dAtA, i, uint64(m.LastBlock))
		i--
		dAtA[i] = 0x40
	}
	if m.FirstBlock != 0 {
		i = encodeVarintAuctionPool(dAtA, i, uint64(m.FirstBlock))
		i--
		dAtA[i] = 0x38
	}
	if m.MinimumBid != 0 {
		i = encodeVarintAuctionPool(dAtA, i, uint64(m.MinimumBid))
		i--
		dAtA[i] = 0x30
	}
	if len(m.AuctionType) > 0 {
		i -= len(m.AuctionType)
		copy(dAtA[i:], m.AuctionType)
		i = encodeVarintAuctionPool(dAtA, i, uint64(len(m.AuctionType)))
		i--
		dAtA[i] = 0x2a
	}
	if m.AvailableSupply != 0 {
		i = encodeVarintAuctionPool(dAtA, i, uint64(m.AvailableSupply))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PoolAddress) > 0 {
		i -= len(m.PoolAddress)
		copy(dAtA[i:], m.PoolAddress)
		i = encodeVarintAuctionPool(dAtA, i, uint64(len(m.PoolAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintAuctionPool(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintAuctionPool(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuctionPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuctionPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AuctionPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuctionPool(uint64(m.Id))
	}
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovAuctionPool(uint64(l))
	}
	l = len(m.PoolAddress)
	if l > 0 {
		n += 1 + l + sovAuctionPool(uint64(l))
	}
	if m.AvailableSupply != 0 {
		n += 1 + sovAuctionPool(uint64(m.AvailableSupply))
	}
	l = len(m.AuctionType)
	if l > 0 {
		n += 1 + l + sovAuctionPool(uint64(l))
	}
	if m.MinimumBid != 0 {
		n += 1 + sovAuctionPool(uint64(m.MinimumBid))
	}
	if m.FirstBlock != 0 {
		n += 1 + sovAuctionPool(uint64(m.FirstBlock))
	}
	if m.LastBlock != 0 {
		n += 1 + sovAuctionPool(uint64(m.LastBlock))
	}
	if m.RevealBlock != 0 {
		n += 1 + sovAuctionPool(uint64(m.RevealBlock))
	}
	return n
}

func sovAuctionPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuctionPool(x uint64) (n int) {
	return sovAuctionPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuctionPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuctionPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuctionPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuctionPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuctionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuctionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuctionPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuctionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuctionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuctionPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuctionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableSupply", wireType)
			}
			m.AvailableSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuctionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvailableSupply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuctionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuctionPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuctionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuctionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumBid", wireType)
			}
			m.MinimumBid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuctionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumBid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstBlock", wireType)
			}
			m.FirstBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuctionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlock", wireType)
			}
			m.LastBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuctionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealBlock", wireType)
			}
			m.RevealBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuctionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevealBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuctionPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuctionPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuctionPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuctionPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuctionPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuctionPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuctionPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuctionPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuctionPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuctionPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuctionPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuctionPool = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/auction/properties.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AuctionType int32

const (
	AuctionType_UNKNOWN    AuctionType = 0
	AuctionType_ASCENDING  AuctionType = 1
	AuctionType_DESCENDING AuctionType = 2
	AuctionType_SEALEDBID  AuctionType = 3
)

var AuctionType_name = map[int32]string{
	0: "UNKNOWN",
	1: "ASCENDING",
	2: "DESCENDING",
	3: "SEALEDBID",
}

var AuctionType_value = map[string]int32{
	"UNKNOWN":    0,
	"ASCENDING":  1,
	"DESCENDING": 2,
	"SEALEDBID":  3,
}

func (x AuctionType) String() string {
	return proto.EnumName(AuctionType_name, int32(x))
}

func (AuctionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2c02fd3e710c35e7, []int{0}
}

type AscendingAuctionProperties struct {
	Supply          uint64  `protobuf:"varint,1,opt,name=supply,proto3" json:"supply,omitempty"`
	MinAllowedBid   uint64  `protobuf:"varint,2,opt,name=minAllowedBid,proto3" json:"minAllowedBid,omitempty"`
	MaxAllowedBid   uint64  `protobuf:"varint,3,opt,name=maxAllowedBid,proto3" json:"maxAllowedBid,omitempty"`
	RedemptionRate  float32 `protobuf:"fixed32,4,opt,name=redemptionRate,proto3" json:"redemptionRate,omitempty"`
	AuctionDuration uint64  `protobuf:"varint,5,opt,name=auctionDuration,proto3" json:"auctionDuration,omitempty"`
	ExtendDuration  uint64  `protobuf:"varint,6,opt,name=extendDuration,proto3" json:"extendDuration,omitempty"`
}

func (m *AscendingAuctionProperties) Reset()         { *m = AscendingAuctionProperties{} }
func (m *AscendingAuctionProperties) String() string { return proto.CompactTextString(m) }
func (*AscendingAuctionProperties) ProtoMessage()    {}
func (*AscendingAuctionProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c02fd3e710c35e7, []int{0}
}
func (m *AscendingAuctionProperties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AscendingAuctionProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AscendingAuctionProperties.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AscendingAuctionProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AscendingAuctionProperties.Merge(m, src)
}
func (m *AscendingAuctionProperties) XXX_Size() int {
	return m.Size()
}
func (m *AscendingAuctionProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_AscendingAuctionProperties.DiscardUnknown(m)
}

var xxx_messageInfo_AscendingAuctionProperties proto.InternalMessageInfo

func (m *AscendingAuctionProperties) GetSupply() uint64 {
	if m != nil {
		return m.Supply
	}
	return 0
}

func (m *AscendingAuctionProperties) GetMinAllowedBid() uint64 {
	if m != nil {
		return m.MinAllowedBid
	}
	return 0
}

func (m *AscendingAuctionProperties) GetMaxAllowedBid() uint64 {
	if m != nil {
		return m.MaxAllowedBid
	}
	return 0
}

func (m *AscendingAuctionProperties) GetRedemptionRate() float32 {
	if m != nil {
		return m.RedemptionRate
	}
	return 0
}

func (m *AscendingAuctionProperties) GetAuctionDuration() uint64 {
	if m != nil {
		return m.AuctionDuration
	}
	return 0
}

func (m *AscendingAuctionProperties) GetExtendDuration() uint64 {
	if m != nil {
		return m.ExtendDuration
	}
	return 0
}

type DescendingAuctionProperties struct {
	Supply          uint64  `protobuf:"varint,1,opt,name=supply,proto3" json:"supply,omitempty"`
	MinAllowedBid   uint64  `protobuf:"varint,2,opt,name=minAllowedBid,proto3" json:"minAllowedBid,omitempty"`
	MaxAllowedBid   uint64  `protobuf:"varint,3,opt,name=maxAllowedBid,proto3" json:"maxAllowedBid,omitempty"`
	RedemptionRate  float32 `protobuf:"fixed32,4,opt,name=redemptionRate,proto3" json:"redemptionRate,omitempty"`
	StartingBid     uint64  `protobuf:"varint,5,opt,name=startingBid,proto3" json:"startingBid,omitempty"`
	BidStepSize     uint64  `protobuf:"varint,6,opt,name=bidStepSize,proto3" json:"bidStepSize,omitempty"`
	BidStepDuration uint64  `protobuf:"varint,7,opt,name=bidStepDuration,proto3" json:"bidStepDuration,omitempty"`
}

func (m *DescendingAuctionProperties) Reset()         { *m = DescendingAuctionProperties{} }
func (m *DescendingAuctionProperties) String() string { return proto.CompactTextString(m) }
func (*DescendingAuctionProperties) ProtoMessage()    {}
func (*DescendingAuctionProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c02fd3e710c35e7, []int{1}
}
func (m *DescendingAuctionProperties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DescendingAuctionProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DescendingAuctionProperties.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DescendingAuctionProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescendingAuctionProperties.Merge(m, src)
}
func (m *DescendingAuctionProperties) XXX_Size() int {
	return m.Size()
}
func (m *DescendingAuctionProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_DescendingAuctionProperties.DiscardUnknown(m)
}

var xxx_messageInfo_DescendingAuctionProperties proto.InternalMessageInfo

func (m *DescendingAuctionProperties) GetSupply() uint64 {
	if m != nil {
		return m.Supply
	}
	return 0
}

func (m *DescendingAuctionProperties) GetMinAllowedBid() uint64 {
	if m != nil {
		return m.MinAllowedBid
	}
	return 0
}

func (m *DescendingAuctionProperties) GetMaxAllowedBid() uint64 {
	if m != nil {
		return m.MaxAllowedBid
	}
	return 0
}

func (m *DescendingAuctionProperties) GetRedemptionRate() float32 {
	if m != nil {
		return m.RedemptionRate
	}
	return 0
}

func (m *DescendingAuctionProperties) GetStartingBid() uint64 {
	if m != nil {
		return m.StartingBid
	}
	return 0
}

func (m *DescendingAuctionProperties) GetBidStepSize() uint64 {
	if m != nil {
		return m.BidStepSize
	}
	return 0
}

func (m *DescendingAuctionProperties) GetBidStepDuration() uint64 {
	if m != nil {
		return m.BidStepDuration
	}
	return 0
}

type SealedBidAuctionProperties struct {
	Supply          uint64  `protobuf:"varint,1,opt,name=supply,proto3" json:"supply,omitempty"`
	MinAllowedBid   uint64  `protobuf:"varint,2,opt,name=minAllowedBid,proto3" json:"minAllowedBid,omitempty"`
	MaxAllowedBid   uint64  `protobuf:"varint,3,opt,name=maxAllowedBid,proto3" json:"maxAllowedBid,omitempty"`
	RedemptionRate  float32 `protobuf:"fixed32,4,opt,name=redemptionRate,proto3" json:"redemptionRate,omitempty"`
	Collateral      uint64  `protobuf:"varint,5,opt,name=collateral,proto3" json:"collateral,omitempty"`
	AuctionDuration uint64  `protobuf:"varint,6,opt,name=auctionDuration,proto3" json:"auctionDuration,omitempty"`
	RevealDuration  uint64  `protobuf:"varint,7,opt,name=revealDuration,proto3" json:"revealDuration,omitempty"`
}

func (m *SealedBidAuctionProperties) Reset()         { *m = SealedBidAuctionProperties{} }
func (m *SealedBidAuctionProperties) String() string { return proto.CompactTextString(m) }
func (*SealedBidAuctionProperties) ProtoMessage()    {}
func (*SealedBidAuctionProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c02fd3e710c35e7, []int{2}
}
func (m *SealedBidAuctionProperties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SealedBidAuctionProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SealedBidAuctionProperties.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SealedBidAuctionProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SealedBidAuctionProperties.Merge(m, src)
}
func (m *SealedBidAuctionProperties) XXX_Size() int {
	return m.Size()
}
func (m *SealedBidAuctionProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_SealedBidAuctionProperties.DiscardUnknown(m)
}

var xxx_messageInfo_SealedBidAuctionProperties proto.InternalMessageInfo

func (m *SealedBidAuctionProperties) GetSupply() uint64 {
	if m != nil {
		return m.Supply
	}
	return 0
}

func (m *SealedBidAuctionProperties) GetMinAllowedBid() uint64 {
	if m != nil {
		return m.MinAllowedBid
	}
	return 0
}

func (m *SealedBidAuctionProperties) GetMaxAllowedBid() uint64 {
	if m != nil {
		return m.MaxAllowedBid
	}
	return 0
}

func (m *SealedBidAuctionProperties) GetRedemptionRate() float32 {
	if m != nil {
		return m.RedemptionRate
	}
	return 0
}

func (m *SealedBidAuctionProperties) GetCollateral() uint64 {
	if m != nil {
		return m.Collateral
	}
	return 0
}

func (m *SealedBidAuctionProperties) GetAuctionDuration() uint64 {
	if m != nil {
		return m.AuctionDuration
	}
	return 0
}

func (m *SealedBidAuctionProperties) GetRevealDuration() uint64 {
	if m != nil {
		return m.RevealDuration
	}
	return 0
}

type AuctionPoolProperties struct {
	PoolAddress                        string                       `protobuf:"bytes,1,opt,name=poolAddress,proto3" json:"poolAddress,omitempty"`
	BidDenom                           string                       `protobuf:"bytes,2,opt,name=bidDenom,proto3" json:"bidDenom,omitempty"`
	SupplyDenom                        string                       `protobuf:"bytes,3,opt,name=supplyDenom,proto3" json:"supplyDenom,omitempty"`
	MinAllowedSupply                   uint64                       `protobuf:"varint,4,opt,name=minAllowedSupply,proto3" json:"minAllowedSupply,omitempty"`
	MaxAllowedSupply                   uint64                       `protobuf:"varint,5,opt,name=maxAllowedSupply,proto3" json:"maxAllowedSupply,omitempty"`
	AllowedAlgorithms                  []AuctionType                `protobuf:"varint,6,rep,packed,name=allowedAlgorithms,proto3,enum=stride.auction.AuctionType" json:"allowedAlgorithms,omitempty"`
	DefaultAscendingAuctionProperties  *AscendingAuctionProperties  `protobuf:"bytes,7,opt,name=defaultAscendingAuctionProperties,proto3" json:"defaultAscendingAuctionProperties,omitempty"`
	DefaultDescendingAuctionProperties *DescendingAuctionProperties `protobuf:"bytes,8,opt,name=defaultDescendingAuctionProperties,proto3" json:"defaultDescendingAuctionProperties,omitempty"`
	DefaultSealedBidAuctionProperties  *SealedBidAuctionProperties  `protobuf:"bytes,9,opt,name=defaultSealedBidAuctionProperties,proto3" json:"defaultSealedBidAuctionProperties,omitempty"`
}

func (m *AuctionPoolProperties) Reset()         { *m = AuctionPoolProperties{} }
func (m *AuctionPoolProperties) String() string { return proto.CompactTextString(m) }
func (*AuctionPoolProperties) ProtoMessage()    {}
func (*AuctionPoolProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c02fd3e710c35e7, []int{3}
}
func (m *AuctionPoolProperties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuctionPoolProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuctionPoolProperties.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuctionPoolProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionPoolProperties.Merge(m, src)
}
func (m *AuctionPoolProperties) XXX_Size() int {
	return m.Size()
}
func (m *AuctionPoolProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionPoolProperties.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionPoolProperties proto.InternalMessageInfo

func (m *AuctionPoolProperties) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

func (m *AuctionPoolProperties) GetBidDenom() string {
	if m != nil {
		return m.BidDenom
	}
	return ""
}

func (m *AuctionPoolProperties) GetSupplyDenom() string {
	if m != nil {
		return m.SupplyDenom
	}
	return ""
}

func (m *AuctionPoolProperties) GetMinAllowedSupply() uint64 {
	if m != nil {
		return m.MinAllowedSupply
	}
	return 0
}

func (m *AuctionPoolProperties) GetMaxAllowedSupply() uint64 {
	if m != nil {
		return m.MaxAllowedSupply
	}
	return 0
}

func (m *AuctionPoolProperties) GetAllowedAlgorithms() []AuctionType {
	if m != nil {
		return m.AllowedAlgorithms
	}
	return nil
}

func (m *AuctionPoolProperties) GetDefaultAscendingAuctionProperties() *AscendingAuctionProperties {
	if m != nil {
		return m.DefaultAscendingAuctionProperties
	}
	return nil
}

func (m *AuctionPoolProperties) GetDefaultDescendingAuctionProperties() *DescendingAuctionProperties {
	if m != nil {
		return m.DefaultDescendingAuctionProperties
	}
	return nil
}

func (m *AuctionPoolProperties) GetDefaultSealedBidAuctionProperties() *SealedBidAuctionProperties {
	if m != nil {
		return m.DefaultSealedBidAuctionProperties
	}
	return nil
}

func init() {
	proto.RegisterEnum("stride.auction.AuctionType", AuctionType_name, AuctionType_value)
	proto.RegisterType((*AscendingAuctionProperties)(nil), "stride.auction.AscendingAuctionProperties")
	proto.RegisterType((*DescendingAuctionProperties)(nil), "stride.auction.DescendingAuctionProperties")
	proto.RegisterType((*SealedBidAuctionProperties)(nil), "stride.auction.SealedBidAuctionProperties")
	proto.RegisterType((*AuctionPoolProperties)(nil), "stride.auction.AuctionPoolProperties")
}

func init() { proto.RegisterFile("stride/auction/properties.proto", fileDescriptor_2c02fd3e710c35e7) }

var fileDescriptor_2c02fd3e710c35e7 = []byte{
	// 623 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x95, 0x41, 0x6f, 0xd3, 0x3c,
	0x18, 0xc7, 0x9b, 0x76, 0xeb, 0x56, 0x57, 0xeb, 0xdb, 0xd7, 0x02, 0x14, 0x3a, 0x29, 0x94, 0x0a,
	0xa1, 0x6a, 0x88, 0x06, 0x0d, 0xf1, 0x01, 0x32, 0x52, 0xc1, 0x60, 0x2a, 0x28, 0x01, 0x21, 0x71,
	0x73, 0x1a, 0x2f, 0xb3, 0xe4, 0xc4, 0x91, 0xe3, 0x8c, 0x16, 0x3e, 0x02, 0x17, 0x6e, 0x48, 0x7c,
	0x22, 0x8e, 0x3b, 0x72, 0x44, 0xed, 0xb7, 0xe0, 0x84, 0xe2, 0x98, 0x90, 0xa5, 0xeb, 0xc6, 0x11,
	0x4e, 0x89, 0x7f, 0xfe, 0x3f, 0x8f, 0x9f, 0xe7, 0xef, 0xc4, 0x06, 0xb7, 0x12, 0xc1, 0x89, 0x8f,
	0x4d, 0x94, 0x4e, 0x05, 0x61, 0x91, 0x19, 0x73, 0x16, 0x63, 0x2e, 0x08, 0x4e, 0x46, 0x31, 0x67,
	0x82, 0xc1, 0x4e, 0x2e, 0x18, 0x29, 0x41, 0xef, 0x66, 0xc0, 0x58, 0x40, 0xb1, 0x29, 0x67, 0xbd,
	0xf4, 0xd8, 0x44, 0xd1, 0x3c, 0x97, 0xf6, 0xae, 0x05, 0x2c, 0x60, 0xf2, 0xd5, 0xcc, 0xde, 0x14,
	0xdd, 0xad, 0xae, 0x80, 0x38, 0x0a, 0x55, 0xf6, 0xc1, 0x0f, 0x0d, 0xf4, 0xac, 0x64, 0x8a, 0x23,
	0x9f, 0x44, 0x81, 0x95, 0x2b, 0x5e, 0x16, 0x25, 0xc0, 0x1b, 0xa0, 0x99, 0xa4, 0x71, 0x4c, 0xe7,
	0xba, 0xd6, 0xd7, 0x86, 0x1b, 0x8e, 0x1a, 0xc1, 0x3b, 0x60, 0x27, 0x24, 0x91, 0x45, 0x29, 0x7b,
	0x87, 0xfd, 0x03, 0xe2, 0xeb, 0x75, 0x39, 0x7d, 0x1e, 0x4a, 0x15, 0x9a, 0x95, 0x54, 0x0d, 0xa5,
	0x2a, 0x43, 0x78, 0x17, 0x74, 0x38, 0xf6, 0x71, 0x18, 0x67, 0x6b, 0x3b, 0x48, 0x60, 0x7d, 0xa3,
	0xaf, 0x0d, 0xeb, 0x4e, 0x85, 0xc2, 0x21, 0xf8, 0x4f, 0xb5, 0x60, 0xa7, 0x1c, 0x65, 0x4f, 0x7d,
	0x53, 0xe6, 0xab, 0xe2, 0x2c, 0x23, 0x9e, 0x09, 0x1c, 0xf9, 0x85, 0xb0, 0x29, 0x85, 0x15, 0x3a,
	0xf8, 0x5c, 0x07, 0xbb, 0x36, 0xfe, 0x37, 0xba, 0xef, 0x83, 0x76, 0x22, 0x10, 0x17, 0x24, 0x0a,
	0xb2, 0x5c, 0x79, 0xe7, 0x65, 0x94, 0x29, 0x3c, 0xe2, 0xbb, 0x02, 0xc7, 0x2e, 0x79, 0x8f, 0x55,
	0xcb, 0x65, 0x94, 0x39, 0xa8, 0x86, 0x85, 0x31, 0x5b, 0xb9, 0x83, 0x15, 0x3c, 0xf8, 0x52, 0x07,
	0x3d, 0x17, 0x23, 0x2a, 0x6b, 0xfc, 0xbb, 0x8d, 0x31, 0x00, 0x98, 0x32, 0x4a, 0x91, 0xc0, 0x1c,
	0x51, 0xe5, 0x4b, 0x89, 0x5c, 0xf4, 0xd9, 0x34, 0xd7, 0x7e, 0x36, 0x1c, 0x9f, 0x62, 0x44, 0x2b,
	0xee, 0x54, 0xe8, 0xe0, 0xe3, 0x26, 0xb8, 0xfe, 0xcb, 0x13, 0xc6, 0x68, 0xc9, 0x97, 0x3e, 0x68,
	0xc7, 0x8c, 0x51, 0xcb, 0xf7, 0x39, 0x4e, 0x12, 0x69, 0x4e, 0xcb, 0x29, 0x23, 0xd8, 0x03, 0xdb,
	0x1e, 0xf1, 0x6d, 0x1c, 0xb1, 0x50, 0x9a, 0xd3, 0x72, 0x8a, 0xb1, 0xdc, 0x62, 0xe9, 0x63, 0x3e,
	0xdd, 0xc8, 0xa3, 0x4b, 0x08, 0xee, 0x81, 0xee, 0x6f, 0x2b, 0xdd, 0x7c, 0x07, 0x36, 0x64, 0x8d,
	0x2b, 0x5c, 0x6a, 0x0b, 0x43, 0x95, 0x76, 0x53, 0x69, 0x2b, 0x1c, 0x1e, 0x82, 0xff, 0x51, 0x0e,
	0x2c, 0x1a, 0x30, 0x4e, 0xc4, 0x49, 0x98, 0xe8, 0xcd, 0x7e, 0x63, 0xd8, 0xd9, 0xdf, 0x1d, 0x9d,
	0x3f, 0x7f, 0x46, 0xaa, 0xf3, 0x57, 0xf3, 0x18, 0x3b, 0xab, 0x51, 0x70, 0x06, 0x6e, 0xfb, 0xf8,
	0x18, 0xa5, 0x54, 0xac, 0x3f, 0x56, 0xa4, 0xaf, 0xed, 0xfd, 0xbd, 0x95, 0xd4, 0x6b, 0x23, 0x9c,
	0xab, 0x93, 0xc2, 0x0f, 0x60, 0xa0, 0x44, 0x97, 0xfc, 0xd3, 0xfa, 0xb6, 0x5c, 0xfa, 0x5e, 0x75,
	0xe9, 0x4b, 0x42, 0x9c, 0x3f, 0x48, 0x5b, 0x6a, 0x7b, 0xfd, 0x6f, 0xa3, 0xb7, 0x2e, 0x6e, 0x7b,
	0x7d, 0x84, 0x73, 0x75, 0xd2, 0xbd, 0xa7, 0xa0, 0x5d, 0xda, 0x12, 0xd8, 0x06, 0x5b, 0xaf, 0x27,
	0xcf, 0x27, 0x2f, 0xde, 0x4c, 0xba, 0x35, 0xb8, 0x03, 0x5a, 0x96, 0xfb, 0x78, 0x3c, 0xb1, 0x0f,
	0x27, 0x4f, 0xba, 0x1a, 0xec, 0x00, 0x60, 0x8f, 0x8b, 0x71, 0x3d, 0x9b, 0x76, 0xc7, 0xd6, 0xd1,
	0xd8, 0x3e, 0x38, 0xb4, 0xbb, 0x8d, 0x83, 0x67, 0x5f, 0x17, 0x86, 0x76, 0xb6, 0x30, 0xb4, 0xef,
	0x0b, 0x43, 0xfb, 0xb4, 0x34, 0x6a, 0x67, 0x4b, 0xa3, 0xf6, 0x6d, 0x69, 0xd4, 0xde, 0x3e, 0x08,
	0x88, 0x38, 0x49, 0xbd, 0xd1, 0x94, 0x85, 0xa6, 0x2b, 0x8b, 0xbf, 0x7f, 0x84, 0xbc, 0xc4, 0x54,
	0x37, 0xcb, 0xe9, 0x23, 0x73, 0x56, 0x5c, 0x2f, 0x62, 0x1e, 0xe3, 0xc4, 0x6b, 0xca, 0xeb, 0xe5,
	0xe1, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x62, 0x6f, 0x5a, 0xdf, 0x06, 0x00, 0x00,
}

func (m *AscendingAuctionProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AscendingAuctionProperties) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AscendingAuctionProperties) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExtendDuration != 0 {
		i = encodeVarintProperties(dAtA, i, uint64(m.ExtendDuration))
		i--
		dAtA[i] = 0x30
	}
	if m.AuctionDuration != 0 {
		i = encodeVarintProperties(dAtA, i, uint64(m.AuctionDuration))
		i--
		dAtA[i] = 0x28
	}
	if m.RedemptionRate != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RedemptionRate))))
		i--
		dAtA[i] = 0x25
	}
	if m.MaxAllowedBid != 0 {
		i = encodeVarintProperties(dAtA, i, uint64(m.MaxAllowedBid))
		i--
		dAtA[i] = 0x18
	}
	if m.MinAllowedBid != 0 {
		i = encodeVarintProperties(dAtA, i, uint64(m.MinAllowedBid))
		i--
		dAtA[i] = 0x10
	}
	if m.Supply != 0 {
		i = encodeVarintProperties(dAtA, i, uint64(m.Supply))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DescendingAuctionProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescendingAuctionProperties) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescendingAuctionProperties) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BidStepDuration != 0 {
		i = encodeVarintProperties(dAtA, i, uint64(m.BidStepDuration))
		i--
		dAtA[i] = 0x38
	}
	if m.BidStepSize != 0 {
		i = encodeVarintProperties(dAtA, i, uint64(m.BidStepSize))
		i--
		dAtA[i] = 0x30
	}
	if m.StartingBid != 0 {
		i = encodeVarintProperties(dAtA, i, uint64(m.StartingBid))
		i--
		dAtA[i] = 0x28
	}
	if m.RedemptionRate != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RedemptionRate))))
		i--
		dAtA[i] = 0x25
	}
	if m.MaxAllowedBid != 0 {
		i = encodeVarintProperties(dAtA, i, uint64(m.MaxAllowedBid))
		i--
		dAtA[i] = 0x18
	}
	if m.MinAllowedBid != 0 {
		i = encodeVarintProperties(dAtA, i, uint64(m.MinAllowedBid))
		i--
		dAtA[i] = 0x10
	}
	if m.Supply != 0 {
		i = encodeVarintProperties(dAtA, i, uint64(m.Supply))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SealedBidAuctionProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SealedBidAuctionProperties) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SealedBidAuctionProperties) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RevealDuration != 0 {
		i = encodeVarintProperties(dAtA, i, uint64(m.RevealDuration))
		i--
		dAtA[i] = 0x38
	}
	if m.AuctionDuration != 0 {
		i = encodeVarintProperties(dAtA, i, uint64(m.AuctionDuration))
		i--
		dAtA[i] = 0x30
	}
	if m.Collateral != 0 {
		i = encodeVarintProperties(dAtA, i, uint64(m.Collateral))
		i--
		dAtA[i] = 0x28
	}
	if m.RedemptionRate != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RedemptionRate))))
		i--
		dAtA[i] = 0x25
	}
	if m.MaxAllowedBid != 0 {
		i = encodeVarintProperties(dAtA, i, uint64(m.MaxAllowedBid))
		i--
		dAtA[i] = 0x18
	}
	if m.MinAllowedBid != 0 {
		i = encodeVarintProperties(dAtA, i, uint64(m.MinAllowedBid))
		i--
		dAtA[i] = 0x10
	}
	if m.Supply != 0 {
		i = encodeVarintProperties(dAtA, i, uint64(m.Supply))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AuctionPoolProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuctionPoolProperties) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuctionPoolProperties) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultSealedBidAuctionProperties != nil {
		{
			size, err := m.DefaultSealedBidAuctionProperties.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProperties(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.DefaultDescendingAuctionProperties != nil {
		{
			size, err := m.DefaultDescendingAuctionProperties.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProperties(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.DefaultAscendingAuctionProperties != nil {
		{
			size, err := m.DefaultAscendingAuctionProperties.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProperties(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AllowedAlgorithms) > 0 {
		dAtA5 := make([]byte, len(m.AllowedAlgorithms)*10)
		var j4 int
		for _, num := range m.AllowedAlgorithms {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintProperties(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x32
	}
	if m.MaxAllowedSupply != 0 {
		i = encodeVarintProperties(dAtA, i, uint64(m.MaxAllowedSupply))
		i--
		dAtA[i] = 0x28
	}
	if m.MinAllowedSupply != 0 {
		i = encodeVarintProperties(dAtA, i, uint64(m.MinAllowedSupply))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SupplyDenom) > 0 {
		i -= len(m.SupplyDenom)
		copy(dAtA[i:], m.SupplyDenom)
		i = encodeVarintProperties(dAtA, i, uint64(len(m.SupplyDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BidDenom) > 0 {
		i -= len(m.BidDenom)
		copy(dAtA[i:], m.BidDenom)
		i = encodeVarintProperties(dAtA, i, uint64(len(m.BidDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolAddress) > 0 {
		i -= len(m.PoolAddress)
		copy(dAtA[i:], m.PoolAddress)
		i = encodeVarintProperties(dAtA, i, uint64(len(m.PoolAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProperties(dAtA []byte, offset int, v uint64) int {
	offset -= sovProperties(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AscendingAuctionProperties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Supply != 0 {
		n += 1 + sovProperties(uint64(m.Supply))
	}
	if m.MinAllowedBid != 0 {
		n += 1 + sovProperties(uint64(m.MinAllowedBid))
	}
	if m.MaxAllowedBid != 0 {
		n += 1 + sovProperties(uint64(m.MaxAllowedBid))
	}
	if m.RedemptionRate != 0 {
		n += 5
	}
	if m.AuctionDuration != 0 {
		n += 1 + sovProperties(uint64(m.AuctionDuration))
	}
	if m.ExtendDuration != 0 {
		n += 1 + sovProperties(uint64(m.ExtendDuration))
	}
	return n
}

func (m *DescendingAuctionProperties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Supply != 0 {
		n += 1 + sovProperties(uint64(m.Supply))
	}
	if m.MinAllowedBid != 0 {
		n += 1 + sovProperties(uint64(m.MinAllowedBid))
	}
	if m.MaxAllowedBid != 0 {
		n += 1 + sovProperties(uint64(m.MaxAllowedBid))
	}
	if m.RedemptionRate != 0 {
		n += 5
	}
	if m.StartingBid != 0 {
		n += 1 + sovProperties(uint64(m.StartingBid))
	}
	if m.BidStepSize != 0 {
		n += 1 + sovProperties(uint64(m.BidStepSize))
	}
	if m.BidStepDuration != 0 {
		n += 1 + sovProperties(uint64(m.BidStepDuration))
	}
	return n
}

func (m *SealedBidAuctionProperties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Supply != 0 {
		n += 1 + sovProperties(uint64(m.Supply))
	}
	if m.MinAllowedBid != 0 {
		n += 1 + sovProperties(uint64(m.MinAllowedBid))
	}
	if m.MaxAllowedBid != 0 {
		n += 1 + sovProperties(uint64(m.MaxAllowedBid))
	}
	if m.RedemptionRate != 0 {
		n += 5
	}
	if m.Collateral != 0 {
		n += 1 + sovProperties(uint64(m.Collateral))
	}
	if m.AuctionDuration != 0 {
		n += 1 + sovProperties(uint64(m.AuctionDuration))
	}
	if m.RevealDuration != 0 {
		n += 1 + sovProperties(uint64(m.RevealDuration))
	}
	return n
}

func (m *AuctionPoolProperties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolAddress)
	if l > 0 {
		n += 1 + l + sovProperties(uint64(l))
	}
	l = len(m.BidDenom)
	if l > 0 {
		n += 1 + l + sovProperties(uint64(l))
	}
	l = len(m.SupplyDenom)
	if l > 0 {
		n += 1 + l + sovProperties(uint64(l))
	}
	if m.MinAllowedSupply != 0 {
		n += 1 + sovProperties(uint64(m.MinAllowedSupply))
	}
	if m.MaxAllowedSupply != 0 {
		n += 1 + sovProperties(uint64(m.MaxAllowedSupply))
	}
	if len(m.AllowedAlgorithms) > 0 {
		l = 0
		for _, e := range m.AllowedAlgorithms {
			l += sovProperties(uint64(e))
		}
		n += 1 + sovProperties(uint64(l)) + l
	}
	if m.DefaultAscendingAuctionProperties != nil {
		l = m.DefaultAscendingAuctionProperties.Size()
		n += 1 + l + sovProperties(uint64(l))
	}
	if m.DefaultDescendingAuctionProperties != nil {
		l = m.DefaultDescendingAuctionProperties.Size()
		n += 1 + l + sovProperties(uint64(l))
	}
	if m.DefaultSealedBidAuctionProperties != nil {
		l = m.DefaultSealedBidAuctionProperties.Size()
		n += 1 + l + sovProperties(uint64(l))
	}
	return n
}

func sovProperties(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProperties(x uint64) (n int) {
	return sovProperties(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AscendingAuctionProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProperties
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AscendingAuctionProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AscendingAuctionProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			m.Supply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Supply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAllowedBid", wireType)
			}
			m.MinAllowedBid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinAllowedBid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllowedBid", wireType)
			}
			m.MaxAllowedBid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAllowedBid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RedemptionRate = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionDuration", wireType)
			}
			m.AuctionDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionDuration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendDuration", wireType)
			}
			m.ExtendDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendDuration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProperties(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProperties
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescendingAuctionProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProperties
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescendingAuctionProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescendingAuctionProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			m.Supply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Supply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAllowedBid", wireType)
			}
			m.MinAllowedBid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinAllowedBid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllowedBid", wireType)
			}
			m.MaxAllowedBid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAllowedBid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RedemptionRate = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartingBid", wireType)
			}
			m.StartingBid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartingBid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidStepSize", wireType)
			}
			m.BidStepSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BidStepSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidStepDuration", wireType)
			}
			m.BidStepDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BidStepDuration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProperties(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProperties
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SealedBidAuctionProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProperties
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SealedBidAuctionProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SealedBidAuctionProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			m.Supply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Supply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAllowedBid", wireType)
			}
			m.MinAllowedBid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinAllowedBid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllowedBid", wireType)
			}
			m.MaxAllowedBid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAllowedBid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RedemptionRate = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			m.Collateral = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Collateral |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionDuration", wireType)
			}
			m.AuctionDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionDuration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealDuration", wireType)
			}
			m.RevealDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevealDuration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProperties(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProperties
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuctionPoolProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProperties
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuctionPoolProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuctionPoolProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplyDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAllowedSupply", wireType)
			}
			m.MinAllowedSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinAllowedSupply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllowedSupply", wireType)
			}
			m.MaxAllowedSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAllowedSupply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v AuctionType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProperties
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= AuctionType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AllowedAlgorithms = append(m.AllowedAlgorithms, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProperties
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProperties
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProperties
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.AllowedAlgorithms) == 0 {
					m.AllowedAlgorithms = make([]AuctionType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v AuctionType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProperties
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= AuctionType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AllowedAlgorithms = append(m.AllowedAlgorithms, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedAlgorithms", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultAscendingAuctionProperties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProperties
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultAscendingAuctionProperties == nil {
				m.DefaultAscendingAuctionProperties = &AscendingAuctionProperties{}
			}
			if err := m.DefaultAscendingAuctionProperties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDescendingAuctionProperties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProperties
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultDescendingAuctionProperties == nil {
				m.DefaultDescendingAuctionProperties = &DescendingAuctionProperties{}
			}
			if err := m.DefaultDescendingAuctionProperties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSealedBidAuctionProperties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProperties
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultSealedBidAuctionProperties == nil {
				m.DefaultSealedBidAuctionProperties = &SealedBidAuctionProperties{}
			}
			if err := m.DefaultSealedBidAuctionProperties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProperties(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProperties
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProperties(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProperties
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProperties
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProperties
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProperties
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProperties
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProperties        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProperties          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProperties = fmt.Errorf("proto: unexpected end of group")
)

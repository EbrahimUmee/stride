// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/liquidgov/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	v1 "github.com/cosmos/cosmos-sdk/x/gov/types/v1"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgLockupTokens struct {
	Creator string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Amount  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	Denom   string                                 `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *MsgLockupTokens) Reset()         { *m = MsgLockupTokens{} }
func (m *MsgLockupTokens) String() string { return proto.CompactTextString(m) }
func (*MsgLockupTokens) ProtoMessage()    {}
func (*MsgLockupTokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cabcafbc7715694, []int{0}
}
func (m *MsgLockupTokens) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLockupTokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLockupTokens.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLockupTokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLockupTokens.Merge(m, src)
}
func (m *MsgLockupTokens) XXX_Size() int {
	return m.Size()
}
func (m *MsgLockupTokens) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLockupTokens.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLockupTokens proto.InternalMessageInfo

func (m *MsgLockupTokens) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgLockupTokens) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type MsgLockupTokensResponse struct {
}

func (m *MsgLockupTokensResponse) Reset()         { *m = MsgLockupTokensResponse{} }
func (m *MsgLockupTokensResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLockupTokensResponse) ProtoMessage()    {}
func (*MsgLockupTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cabcafbc7715694, []int{1}
}
func (m *MsgLockupTokensResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLockupTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLockupTokensResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLockupTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLockupTokensResponse.Merge(m, src)
}
func (m *MsgLockupTokensResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLockupTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLockupTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLockupTokensResponse proto.InternalMessageInfo

type MsgUnlockTokens struct {
	Creator string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Amount  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	Denom   string                                 `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *MsgUnlockTokens) Reset()         { *m = MsgUnlockTokens{} }
func (m *MsgUnlockTokens) String() string { return proto.CompactTextString(m) }
func (*MsgUnlockTokens) ProtoMessage()    {}
func (*MsgUnlockTokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cabcafbc7715694, []int{2}
}
func (m *MsgUnlockTokens) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnlockTokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnlockTokens.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnlockTokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnlockTokens.Merge(m, src)
}
func (m *MsgUnlockTokens) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnlockTokens) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnlockTokens.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnlockTokens proto.InternalMessageInfo

func (m *MsgUnlockTokens) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUnlockTokens) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type MsgUnlockTokensResponse struct {
	CompletionTime time.Time `protobuf:"bytes,1,opt,name=completion_time,json=completionTime,proto3,stdtime" json:"completion_time"`
}

func (m *MsgUnlockTokensResponse) Reset()         { *m = MsgUnlockTokensResponse{} }
func (m *MsgUnlockTokensResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnlockTokensResponse) ProtoMessage()    {}
func (*MsgUnlockTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cabcafbc7715694, []int{3}
}
func (m *MsgUnlockTokensResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnlockTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnlockTokensResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnlockTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnlockTokensResponse.Merge(m, src)
}
func (m *MsgUnlockTokensResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnlockTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnlockTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnlockTokensResponse proto.InternalMessageInfo

func (m *MsgUnlockTokensResponse) GetCompletionTime() time.Time {
	if m != nil {
		return m.CompletionTime
	}
	return time.Time{}
}

type MsgLiquidVote struct {
	Creator    string        `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ProposalId uint64        `protobuf:"varint,2,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id"`
	VoteOption v1.VoteOption `protobuf:"varint,3,opt,name=vote_option,json=voteOption,proto3,enum=cosmos.gov.v1.VoteOption" json:"vote_option,omitempty"`
	// host_zone_chain_id defines the host zone of the vote
	HostZoneChainId string `protobuf:"bytes,4,opt,name=host_zone_chain_id,json=hostZoneChainId,proto3" json:"host_zone_chain_id,omitempty"`
}

func (m *MsgLiquidVote) Reset()         { *m = MsgLiquidVote{} }
func (m *MsgLiquidVote) String() string { return proto.CompactTextString(m) }
func (*MsgLiquidVote) ProtoMessage()    {}
func (*MsgLiquidVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cabcafbc7715694, []int{4}
}
func (m *MsgLiquidVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLiquidVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLiquidVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLiquidVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLiquidVote.Merge(m, src)
}
func (m *MsgLiquidVote) XXX_Size() int {
	return m.Size()
}
func (m *MsgLiquidVote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLiquidVote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLiquidVote proto.InternalMessageInfo

func (m *MsgLiquidVote) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgLiquidVote) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

func (m *MsgLiquidVote) GetVoteOption() v1.VoteOption {
	if m != nil {
		return m.VoteOption
	}
	return v1.VoteOption_VOTE_OPTION_UNSPECIFIED
}

func (m *MsgLiquidVote) GetHostZoneChainId() string {
	if m != nil {
		return m.HostZoneChainId
	}
	return ""
}

type MsgLiquidVoteResponse struct {
}

func (m *MsgLiquidVoteResponse) Reset()         { *m = MsgLiquidVoteResponse{} }
func (m *MsgLiquidVoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLiquidVoteResponse) ProtoMessage()    {}
func (*MsgLiquidVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cabcafbc7715694, []int{5}
}
func (m *MsgLiquidVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLiquidVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLiquidVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLiquidVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLiquidVoteResponse.Merge(m, src)
}
func (m *MsgLiquidVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLiquidVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLiquidVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLiquidVoteResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgLockupTokens)(nil), "stride.liquidgov.MsgLockupTokens")
	proto.RegisterType((*MsgLockupTokensResponse)(nil), "stride.liquidgov.MsgLockupTokensResponse")
	proto.RegisterType((*MsgUnlockTokens)(nil), "stride.liquidgov.MsgUnlockTokens")
	proto.RegisterType((*MsgUnlockTokensResponse)(nil), "stride.liquidgov.MsgUnlockTokensResponse")
	proto.RegisterType((*MsgLiquidVote)(nil), "stride.liquidgov.MsgLiquidVote")
	proto.RegisterType((*MsgLiquidVoteResponse)(nil), "stride.liquidgov.MsgLiquidVoteResponse")
}

func init() { proto.RegisterFile("stride/liquidgov/tx.proto", fileDescriptor_5cabcafbc7715694) }

var fileDescriptor_5cabcafbc7715694 = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x54, 0x3d, 0x6f, 0xd3, 0x40,
	0x18, 0x8e, 0xdb, 0x52, 0xe0, 0x5a, 0x9a, 0xca, 0x0a, 0xca, 0xc7, 0x60, 0x43, 0x06, 0x3e, 0x95,
	0x33, 0x0d, 0x62, 0xc9, 0x46, 0x90, 0x90, 0x22, 0x25, 0x42, 0x72, 0x4b, 0x87, 0xaa, 0x92, 0xe5,
	0xd8, 0x87, 0x63, 0x25, 0xbe, 0xd7, 0xf8, 0x2e, 0x56, 0x61, 0xe4, 0x17, 0x74, 0x65, 0xe3, 0x27,
	0x30, 0xc0, 0x7f, 0xe8, 0x58, 0x31, 0x21, 0x86, 0x80, 0x92, 0x01, 0x84, 0xf8, 0x11, 0xe8, 0xce,
	0x76, 0x70, 0xa2, 0xa0, 0x4a, 0x6c, 0x4c, 0x77, 0xef, 0xbd, 0xcf, 0xbd, 0x1f, 0xcf, 0xfb, 0xdc,
	0xa1, 0x2a, 0xe3, 0x91, 0xef, 0x12, 0x63, 0xe4, 0xbf, 0x1c, 0xfb, 0xae, 0x07, 0xb1, 0xc1, 0x4f,
	0x70, 0x18, 0x01, 0x07, 0x75, 0x37, 0x71, 0xe1, 0xb9, 0xab, 0x56, 0x76, 0x80, 0x05, 0xc0, 0x0c,
	0x01, 0x8b, 0xf7, 0xc4, 0x92, 0x40, 0x6b, 0x25, 0x0f, 0x3c, 0x90, 0x5b, 0x43, 0xec, 0xd2, 0xd3,
	0x6a, 0x02, 0xb7, 0x12, 0x47, 0x62, 0xa4, 0xae, 0x2c, 0x52, 0xc0, 0x3c, 0x11, 0x29, 0x60, 0x5e,
	0xea, 0xd0, 0x3d, 0x00, 0x6f, 0x44, 0x0c, 0x69, 0xf5, 0xc7, 0x2f, 0x0c, 0xee, 0x07, 0x84, 0x71,
	0x3b, 0x08, 0x13, 0x40, 0xfd, 0xa3, 0x82, 0x8a, 0x3d, 0xe6, 0x75, 0xc1, 0x19, 0x8e, 0xc3, 0x03,
	0x18, 0x12, 0xca, 0xd4, 0x26, 0xba, 0xec, 0x44, 0xc4, 0xe6, 0x10, 0x55, 0x94, 0x1b, 0xca, 0x9d,
	0xab, 0xed, 0xca, 0xa7, 0x0f, 0x8d, 0x52, 0x9a, 0xf0, 0xb1, 0xeb, 0x46, 0x84, 0xb1, 0x7d, 0x1e,
	0xf9, 0xd4, 0x33, 0x33, 0xa0, 0xfa, 0x14, 0x6d, 0xda, 0x01, 0x8c, 0x29, 0xaf, 0xac, 0xc9, 0x2b,
	0xf8, 0x6c, 0xa2, 0x17, 0xbe, 0x4c, 0xf4, 0x5b, 0x9e, 0xcf, 0x07, 0xe3, 0x3e, 0x76, 0x20, 0x48,
	0x4b, 0x4e, 0x97, 0x06, 0x73, 0x87, 0x06, 0x7f, 0x15, 0x12, 0x86, 0x3b, 0x94, 0x9b, 0xe9, 0x6d,
	0xb5, 0x84, 0x2e, 0xb9, 0x84, 0x42, 0x50, 0x59, 0x17, 0x61, 0xcc, 0xc4, 0x68, 0xed, 0xfe, 0x78,
	0xa7, 0x17, 0xde, 0x7c, 0x7f, 0x7f, 0x2f, 0xcb, 0x57, 0xaf, 0xa2, 0xf2, 0x52, 0xd9, 0x26, 0x61,
	0x21, 0x50, 0x46, 0xb2, 0x96, 0x9e, 0xd3, 0x11, 0x38, 0xc3, 0xff, 0xa8, 0xa5, 0x81, 0x6c, 0x29,
	0x5f, 0x76, 0xd6, 0x92, 0xda, 0x43, 0x45, 0x07, 0x82, 0x70, 0x44, 0xb8, 0x0f, 0xd4, 0x12, 0x33,
	0x94, 0x6d, 0x6c, 0x35, 0x6b, 0x38, 0x19, 0x30, 0xce, 0x06, 0x8c, 0x0f, 0xb2, 0x01, 0xb7, 0xaf,
	0x88, 0x7a, 0x4f, 0xbf, 0xea, 0x8a, 0xb9, 0xf3, 0xe7, 0xb2, 0x70, 0xd7, 0x7f, 0x29, 0xe8, 0x9a,
	0x60, 0x4f, 0x2a, 0xf1, 0x10, 0x38, 0xf9, 0x27, 0x7e, 0x1e, 0xa0, 0xad, 0x30, 0x82, 0x10, 0x98,
	0x3d, 0xb2, 0x7c, 0x57, 0x92, 0xb4, 0xd1, 0x2e, 0xfe, 0x9c, 0xe8, 0xf9, 0x63, 0x13, 0x65, 0x46,
	0xc7, 0x55, 0x5b, 0x68, 0x2b, 0x06, 0x4e, 0x2c, 0x08, 0x45, 0x29, 0x92, 0x8f, 0x9d, 0x66, 0x15,
	0xa7, 0x69, 0x84, 0xfe, 0xe3, 0x3d, 0x2c, 0xea, 0x79, 0x26, 0x01, 0x26, 0x8a, 0xe7, 0x7b, 0xf5,
	0x3e, 0x52, 0x07, 0xc0, 0xb8, 0xf5, 0x1a, 0x28, 0xb1, 0x9c, 0x81, 0xed, 0x53, 0x91, 0x74, 0x43,
	0x52, 0x5a, 0x14, 0x9e, 0x23, 0xa0, 0xe4, 0x89, 0x38, 0xef, 0xb8, 0xad, 0xed, 0x05, 0x62, 0xcb,
	0xe8, 0xfa, 0x42, 0xb7, 0x19, 0xad, 0xcd, 0xb7, 0x6b, 0x68, 0xbd, 0xc7, 0x3c, 0xf5, 0x18, 0x6d,
	0x2f, 0x3c, 0x80, 0x9b, 0x78, 0xf9, 0xad, 0xe2, 0x25, 0xb1, 0xd5, 0xee, 0x5e, 0x08, 0x99, 0x0f,
	0xef, 0x18, 0x6d, 0x2f, 0x68, 0x71, 0x75, 0xf4, 0x3c, 0xe4, 0x2f, 0xd1, 0x57, 0x4a, 0xe3, 0x10,
	0xa1, 0xdc, 0x1c, 0xf5, 0xd5, 0x65, 0xcd, 0x01, 0xb5, 0xdb, 0x17, 0x00, 0xb2, 0xb8, 0xed, 0xee,
	0xd9, 0x54, 0x53, 0xce, 0xa7, 0x9a, 0xf2, 0x6d, 0xaa, 0x29, 0xa7, 0x33, 0xad, 0x70, 0x3e, 0xd3,
	0x0a, 0x9f, 0x67, 0x5a, 0xe1, 0xa8, 0x99, 0xd3, 0xff, 0xbe, 0x0c, 0xd6, 0xe8, 0xda, 0x7d, 0x66,
	0xa4, 0x5f, 0x5f, 0xfc, 0xc8, 0x38, 0xc9, 0xff, 0x7f, 0xe2, 0x3d, 0xf4, 0x37, 0xa5, 0x3e, 0x1f,
	0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x13, 0x73, 0xe5, 0x21, 0x20, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	LockupTokens(ctx context.Context, in *MsgLockupTokens, opts ...grpc.CallOption) (*MsgLockupTokensResponse, error)
	UnlockTokens(ctx context.Context, in *MsgUnlockTokens, opts ...grpc.CallOption) (*MsgUnlockTokensResponse, error)
	LiquidVote(ctx context.Context, in *MsgLiquidVote, opts ...grpc.CallOption) (*MsgLiquidVoteResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) LockupTokens(ctx context.Context, in *MsgLockupTokens, opts ...grpc.CallOption) (*MsgLockupTokensResponse, error) {
	out := new(MsgLockupTokensResponse)
	err := c.cc.Invoke(ctx, "/stride.liquidgov.Msg/LockupTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnlockTokens(ctx context.Context, in *MsgUnlockTokens, opts ...grpc.CallOption) (*MsgUnlockTokensResponse, error) {
	out := new(MsgUnlockTokensResponse)
	err := c.cc.Invoke(ctx, "/stride.liquidgov.Msg/UnlockTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LiquidVote(ctx context.Context, in *MsgLiquidVote, opts ...grpc.CallOption) (*MsgLiquidVoteResponse, error) {
	out := new(MsgLiquidVoteResponse)
	err := c.cc.Invoke(ctx, "/stride.liquidgov.Msg/LiquidVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	LockupTokens(context.Context, *MsgLockupTokens) (*MsgLockupTokensResponse, error)
	UnlockTokens(context.Context, *MsgUnlockTokens) (*MsgUnlockTokensResponse, error)
	LiquidVote(context.Context, *MsgLiquidVote) (*MsgLiquidVoteResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) LockupTokens(ctx context.Context, req *MsgLockupTokens) (*MsgLockupTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockupTokens not implemented")
}
func (*UnimplementedMsgServer) UnlockTokens(ctx context.Context, req *MsgUnlockTokens) (*MsgUnlockTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockTokens not implemented")
}
func (*UnimplementedMsgServer) LiquidVote(ctx context.Context, req *MsgLiquidVote) (*MsgLiquidVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidVote not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_LockupTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLockupTokens)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LockupTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.liquidgov.Msg/LockupTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LockupTokens(ctx, req.(*MsgLockupTokens))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnlockTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnlockTokens)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnlockTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.liquidgov.Msg/UnlockTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnlockTokens(ctx, req.(*MsgUnlockTokens))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LiquidVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLiquidVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LiquidVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.liquidgov.Msg/LiquidVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LiquidVote(ctx, req.(*MsgLiquidVote))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stride.liquidgov.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LockupTokens",
			Handler:    _Msg_LockupTokens_Handler,
		},
		{
			MethodName: "UnlockTokens",
			Handler:    _Msg_UnlockTokens_Handler,
		},
		{
			MethodName: "LiquidVote",
			Handler:    _Msg_LiquidVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stride/liquidgov/tx.proto",
}

func (m *MsgLockupTokens) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLockupTokens) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLockupTokens) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLockupTokensResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLockupTokensResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLockupTokensResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnlockTokens) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnlockTokens) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnlockTokens) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnlockTokensResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnlockTokensResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnlockTokensResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTx(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgLiquidVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLiquidVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLiquidVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HostZoneChainId) > 0 {
		i -= len(m.HostZoneChainId)
		copy(dAtA[i:], m.HostZoneChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.HostZoneChainId)))
		i--
		dAtA[i] = 0x22
	}
	if m.VoteOption != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VoteOption))
		i--
		dAtA[i] = 0x18
	}
	if m.ProposalId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLiquidVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLiquidVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLiquidVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgLockupTokens) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgLockupTokensResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnlockTokens) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnlockTokensResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgLiquidVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ProposalId != 0 {
		n += 1 + sovTx(uint64(m.ProposalId))
	}
	if m.VoteOption != 0 {
		n += 1 + sovTx(uint64(m.VoteOption))
	}
	l = len(m.HostZoneChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgLiquidVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgLockupTokens) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLockupTokens: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLockupTokens: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLockupTokensResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLockupTokensResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLockupTokensResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnlockTokens) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnlockTokens: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnlockTokens: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnlockTokensResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnlockTokensResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnlockTokensResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLiquidVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLiquidVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLiquidVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteOption", wireType)
			}
			m.VoteOption = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteOption |= v1.VoteOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostZoneChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostZoneChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLiquidVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLiquidVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLiquidVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/ratelimit/ratelimit.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PacketDirection int32

const (
	PACKET_SEND PacketDirection = 0
	PACKET_RECV PacketDirection = 1
)

var PacketDirection_name = map[int32]string{
	0: "PACKET_SEND",
	1: "PACKET_RECV",
}

var PacketDirection_value = map[string]int32{
	"PACKET_SEND": 0,
	"PACKET_RECV": 1,
}

func (x PacketDirection) String() string {
	return proto.EnumName(PacketDirection_name, int32(x))
}

func (PacketDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a3e00ee2c967d747, []int{0}
}

type FlowDirection int32

const (
	FLOW_IN  FlowDirection = 0
	FLOW_OUT FlowDirection = 1
)

var FlowDirection_name = map[int32]string{
	0: "FLOW_IN",
	1: "FLOW_OUT",
}

var FlowDirection_value = map[string]int32{
	"FLOW_IN":  0,
	"FLOW_OUT": 1,
}

func (x FlowDirection) String() string {
	return proto.EnumName(FlowDirection_name, int32(x))
}

func (FlowDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a3e00ee2c967d747, []int{1}
}

type Path struct {
	// path identifier ({BaseDenom}/{ChannelId})
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// path base_denom - represents the underlying denom (ignoring ibc traces)
	BaseDenom string `protobuf:"bytes,2,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	// path channelid
	ChannelId string `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (m *Path) Reset()         { *m = Path{} }
func (m *Path) String() string { return proto.CompactTextString(m) }
func (*Path) ProtoMessage()    {}
func (*Path) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3e00ee2c967d747, []int{0}
}
func (m *Path) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Path) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Path.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Path) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Path.Merge(m, src)
}
func (m *Path) XXX_Size() int {
	return m.Size()
}
func (m *Path) XXX_DiscardUnknown() {
	xxx_messageInfo_Path.DiscardUnknown(m)
}

var xxx_messageInfo_Path proto.InternalMessageInfo

func (m *Path) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Path) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *Path) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

type Quota struct {
	// quota name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// max percent for sending
	MaxPercentSend uint64 `protobuf:"varint,2,opt,name=max_percent_send,json=maxPercentSend,proto3" json:"max_percent_send,omitempty"`
	// max percent for receiving
	MaxPercentRecv uint64 `protobuf:"varint,3,opt,name=max_percent_recv,json=maxPercentRecv,proto3" json:"max_percent_recv,omitempty"`
	// duration minutes for time window
	DurationMinutes uint64 `protobuf:"varint,4,opt,name=duration_minutes,json=durationMinutes,proto3" json:"duration_minutes,omitempty"`
	// period end (now + duration_minutes, set as sec)
	PeriodEnd uint64 `protobuf:"varint,5,opt,name=period_end,json=periodEnd,proto3" json:"period_end,omitempty"`
}

func (m *Quota) Reset()         { *m = Quota{} }
func (m *Quota) String() string { return proto.CompactTextString(m) }
func (*Quota) ProtoMessage()    {}
func (*Quota) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3e00ee2c967d747, []int{1}
}
func (m *Quota) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Quota) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Quota.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Quota) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Quota.Merge(m, src)
}
func (m *Quota) XXX_Size() int {
	return m.Size()
}
func (m *Quota) XXX_DiscardUnknown() {
	xxx_messageInfo_Quota.DiscardUnknown(m)
}

var xxx_messageInfo_Quota proto.InternalMessageInfo

func (m *Quota) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Quota) GetMaxPercentSend() uint64 {
	if m != nil {
		return m.MaxPercentSend
	}
	return 0
}

func (m *Quota) GetMaxPercentRecv() uint64 {
	if m != nil {
		return m.MaxPercentRecv
	}
	return 0
}

func (m *Quota) GetDurationMinutes() uint64 {
	if m != nil {
		return m.DurationMinutes
	}
	return 0
}

func (m *Quota) GetPeriodEnd() uint64 {
	if m != nil {
		return m.PeriodEnd
	}
	return 0
}

type Flow struct {
	// incoming flow
	InFlow uint64 `protobuf:"varint,1,opt,name=in_flow,json=inFlow,proto3" json:"in_flow,omitempty"`
	// outgoing flow
	OutFlow uint64 `protobuf:"varint,2,opt,name=out_flow,json=outFlow,proto3" json:"out_flow,omitempty"`
	// channel value
	ChannelValue uint64 `protobuf:"varint,3,opt,name=channel_value,json=channelValue,proto3" json:"channel_value,omitempty"`
}

func (m *Flow) Reset()         { *m = Flow{} }
func (m *Flow) String() string { return proto.CompactTextString(m) }
func (*Flow) ProtoMessage()    {}
func (*Flow) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3e00ee2c967d747, []int{2}
}
func (m *Flow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Flow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Flow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Flow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flow.Merge(m, src)
}
func (m *Flow) XXX_Size() int {
	return m.Size()
}
func (m *Flow) XXX_DiscardUnknown() {
	xxx_messageInfo_Flow.DiscardUnknown(m)
}

var xxx_messageInfo_Flow proto.InternalMessageInfo

func (m *Flow) GetInFlow() uint64 {
	if m != nil {
		return m.InFlow
	}
	return 0
}

func (m *Flow) GetOutFlow() uint64 {
	if m != nil {
		return m.OutFlow
	}
	return 0
}

func (m *Flow) GetChannelValue() uint64 {
	if m != nil {
		return m.ChannelValue
	}
	return 0
}

type RateLimit struct {
	Path  *Path  `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Flow  *Flow  `protobuf:"bytes,2,opt,name=flow,proto3" json:"flow,omitempty"`
	Quota *Quota `protobuf:"bytes,3,opt,name=quota,proto3" json:"quota,omitempty"`
}

func (m *RateLimit) Reset()         { *m = RateLimit{} }
func (m *RateLimit) String() string { return proto.CompactTextString(m) }
func (*RateLimit) ProtoMessage()    {}
func (*RateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3e00ee2c967d747, []int{3}
}
func (m *RateLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RateLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimit.Merge(m, src)
}
func (m *RateLimit) XXX_Size() int {
	return m.Size()
}
func (m *RateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimit proto.InternalMessageInfo

func (m *RateLimit) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *RateLimit) GetFlow() *Flow {
	if m != nil {
		return m.Flow
	}
	return nil
}

func (m *RateLimit) GetQuota() *Quota {
	if m != nil {
		return m.Quota
	}
	return nil
}

func init() {
	proto.RegisterEnum("stride.ratelimit.PacketDirection", PacketDirection_name, PacketDirection_value)
	proto.RegisterEnum("stride.ratelimit.FlowDirection", FlowDirection_name, FlowDirection_value)
	proto.RegisterType((*Path)(nil), "stride.ratelimit.Path")
	proto.RegisterType((*Quota)(nil), "stride.ratelimit.Quota")
	proto.RegisterType((*Flow)(nil), "stride.ratelimit.Flow")
	proto.RegisterType((*RateLimit)(nil), "stride.ratelimit.RateLimit")
}

func init() { proto.RegisterFile("stride/ratelimit/ratelimit.proto", fileDescriptor_a3e00ee2c967d747) }

var fileDescriptor_a3e00ee2c967d747 = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0x93, 0x92, 0xae, 0xeb, 0xd7, 0x6d, 0x8d, 0x2c, 0xc4, 0xca, 0x24, 0xa2, 0xa9, 0x5c,
	0x46, 0xa5, 0xb5, 0xa8, 0x70, 0xe1, 0x08, 0x6b, 0x27, 0x4d, 0x94, 0xad, 0xa4, 0x65, 0x48, 0x5c,
	0x2c, 0x37, 0x36, 0xad, 0x45, 0x62, 0x87, 0xc4, 0xe9, 0xca, 0x1b, 0x70, 0x44, 0xbc, 0x02, 0x4f,
	0xc1, 0x1b, 0x70, 0xdc, 0x91, 0x23, 0x6a, 0x5f, 0x04, 0xd9, 0x49, 0xb7, 0x31, 0x76, 0x73, 0x7e,
	0xdf, 0xcf, 0xf9, 0xfe, 0xf2, 0xf7, 0xc1, 0x7e, 0xaa, 0x12, 0x4e, 0x59, 0x27, 0x21, 0x8a, 0x85,
	0x3c, 0xe2, 0xea, 0xfa, 0xd4, 0x8e, 0x13, 0xa9, 0x24, 0x72, 0x73, 0xa3, 0x7d, 0xc5, 0xf7, 0xee,
	0x4f, 0xe5, 0x54, 0x9a, 0x62, 0x47, 0x9f, 0x72, 0xaf, 0x39, 0x06, 0x67, 0x48, 0xd4, 0x0c, 0xed,
	0x40, 0x89, 0xd3, 0x86, 0xbd, 0x6f, 0x1f, 0x54, 0xfd, 0x12, 0xa7, 0xe8, 0x11, 0xc0, 0x84, 0xa4,
	0x0c, 0x53, 0x26, 0x64, 0xd4, 0x28, 0x19, 0x5e, 0xd5, 0xa4, 0xa7, 0x81, 0x2e, 0x07, 0x33, 0x22,
	0x04, 0x0b, 0x31, 0xa7, 0x8d, 0x7b, 0x79, 0xb9, 0x20, 0x27, 0xb4, 0xf9, 0xd3, 0x86, 0xf2, 0xdb,
	0x4c, 0x2a, 0x82, 0x10, 0x38, 0x82, 0x44, 0xac, 0xf8, 0xb3, 0x39, 0xa3, 0x03, 0x70, 0x23, 0xb2,
	0xc0, 0x31, 0x4b, 0x02, 0x26, 0x14, 0x4e, 0x99, 0xa0, 0xa6, 0x83, 0xe3, 0xef, 0x44, 0x64, 0x31,
	0xcc, 0xf1, 0x88, 0x09, 0x7a, 0xdb, 0x4c, 0x58, 0x30, 0x37, 0xcd, 0xfe, 0x31, 0x7d, 0x16, 0xcc,
	0xd1, 0x13, 0x70, 0x69, 0x96, 0x10, 0xc5, 0xa5, 0xc0, 0x11, 0x17, 0x99, 0x62, 0x69, 0xc3, 0x31,
	0x66, 0x7d, 0xcd, 0xdf, 0xe4, 0x58, 0x67, 0x8f, 0x59, 0xc2, 0x25, 0xc5, 0xba, 0x71, 0xd9, 0x48,
	0xd5, 0x9c, 0xf4, 0x05, 0x6d, 0x62, 0x70, 0x8e, 0x43, 0x79, 0x81, 0x76, 0xa1, 0xc2, 0x05, 0xfe,
	0x18, 0xca, 0x0b, 0x13, 0xde, 0xf1, 0x37, 0xb8, 0x30, 0x85, 0x87, 0xb0, 0x29, 0x33, 0x95, 0x57,
	0xf2, 0xd8, 0x15, 0x99, 0x29, 0x53, 0x7a, 0x0c, 0xdb, 0xeb, 0x67, 0x99, 0x93, 0x30, 0x63, 0x45,
	0xd8, 0xad, 0x02, 0x9e, 0x6b, 0xd6, 0xfc, 0x6e, 0x43, 0xd5, 0x27, 0x8a, 0x0d, 0xf4, 0x58, 0x50,
	0x0b, 0x9c, 0x98, 0xa8, 0x99, 0xe9, 0x51, 0xeb, 0x3e, 0x68, 0xdf, 0x9e, 0x5b, 0x5b, 0x8f, 0xc7,
	0x37, 0x8e, 0x76, 0xaf, 0xba, 0xde, 0xe9, 0xea, 0x10, 0xbe, 0x71, 0xd0, 0x21, 0x94, 0x3f, 0xeb,
	0x09, 0x98, 0x08, 0xb5, 0xee, 0xee, 0xff, 0xb2, 0x19, 0x90, 0x9f, 0x5b, 0xad, 0x17, 0x50, 0x1f,
	0x92, 0xe0, 0x13, 0x53, 0x3d, 0x9e, 0xb0, 0x40, 0x3f, 0x17, 0xaa, 0x43, 0x6d, 0xf8, 0xf2, 0xe8,
	0x75, 0x7f, 0x8c, 0x47, 0xfd, 0xd3, 0x9e, 0x6b, 0xdd, 0x00, 0x7e, 0xff, 0xe8, 0xdc, 0xb5, 0xf7,
	0x9c, 0xaf, 0x3f, 0x3c, 0xab, 0xf5, 0x14, 0xb6, 0x75, 0xdf, 0xeb, 0x8b, 0x35, 0xa8, 0x1c, 0x0f,
	0xce, 0xde, 0xe3, 0x93, 0x53, 0xd7, 0x42, 0x5b, 0xb0, 0x69, 0x3e, 0xce, 0xde, 0x8d, 0xd7, 0x37,
	0x5e, 0x0d, 0x7e, 0x2d, 0x3d, 0xfb, 0x72, 0xe9, 0xd9, 0x7f, 0x96, 0x9e, 0xfd, 0x6d, 0xe5, 0x59,
	0x97, 0x2b, 0xcf, 0xfa, 0xbd, 0xf2, 0xac, 0x0f, 0xdd, 0x29, 0x57, 0xb3, 0x6c, 0xd2, 0x0e, 0x64,
	0xd4, 0x19, 0x99, 0xc0, 0x87, 0x03, 0x32, 0x49, 0x3b, 0xc5, 0xbe, 0xcf, 0x9f, 0x77, 0x16, 0x37,
	0x96, 0x5e, 0x7d, 0x89, 0x59, 0x3a, 0xd9, 0x30, 0x9b, 0xfc, 0xec, 0x6f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x1d, 0x0f, 0xf5, 0x90, 0x15, 0x03, 0x00, 0x00,
}

func (m *Path) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Path) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Path) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintRatelimit(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintRatelimit(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRatelimit(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Quota) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Quota) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Quota) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PeriodEnd != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.PeriodEnd))
		i--
		dAtA[i] = 0x28
	}
	if m.DurationMinutes != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.DurationMinutes))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxPercentRecv != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.MaxPercentRecv))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxPercentSend != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.MaxPercentSend))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRatelimit(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Flow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Flow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Flow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChannelValue != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.ChannelValue))
		i--
		dAtA[i] = 0x18
	}
	if m.OutFlow != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.OutFlow))
		i--
		dAtA[i] = 0x10
	}
	if m.InFlow != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.InFlow))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Quota != nil {
		{
			size, err := m.Quota.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRatelimit(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Flow != nil {
		{
			size, err := m.Flow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRatelimit(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRatelimit(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRatelimit(dAtA []byte, offset int, v uint64) int {
	offset -= sovRatelimit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Path) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRatelimit(uint64(l))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovRatelimit(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovRatelimit(uint64(l))
	}
	return n
}

func (m *Quota) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRatelimit(uint64(l))
	}
	if m.MaxPercentSend != 0 {
		n += 1 + sovRatelimit(uint64(m.MaxPercentSend))
	}
	if m.MaxPercentRecv != 0 {
		n += 1 + sovRatelimit(uint64(m.MaxPercentRecv))
	}
	if m.DurationMinutes != 0 {
		n += 1 + sovRatelimit(uint64(m.DurationMinutes))
	}
	if m.PeriodEnd != 0 {
		n += 1 + sovRatelimit(uint64(m.PeriodEnd))
	}
	return n
}

func (m *Flow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InFlow != 0 {
		n += 1 + sovRatelimit(uint64(m.InFlow))
	}
	if m.OutFlow != 0 {
		n += 1 + sovRatelimit(uint64(m.OutFlow))
	}
	if m.ChannelValue != 0 {
		n += 1 + sovRatelimit(uint64(m.ChannelValue))
	}
	return n
}

func (m *RateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovRatelimit(uint64(l))
	}
	if m.Flow != nil {
		l = m.Flow.Size()
		n += 1 + l + sovRatelimit(uint64(l))
	}
	if m.Quota != nil {
		l = m.Quota.Size()
		n += 1 + l + sovRatelimit(uint64(l))
	}
	return n
}

func sovRatelimit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRatelimit(x uint64) (n int) {
	return sovRatelimit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Path) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Path: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Path: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatelimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Quota) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Quota: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Quota: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPercentSend", wireType)
			}
			m.MaxPercentSend = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPercentSend |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPercentRecv", wireType)
			}
			m.MaxPercentRecv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPercentRecv |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationMinutes", wireType)
			}
			m.DurationMinutes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationMinutes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodEnd", wireType)
			}
			m.PeriodEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodEnd |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRatelimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Flow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Flow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Flow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InFlow", wireType)
			}
			m.InFlow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InFlow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutFlow", wireType)
			}
			m.OutFlow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutFlow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelValue", wireType)
			}
			m.ChannelValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelValue |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRatelimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &Path{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flow == nil {
				m.Flow = &Flow{}
			}
			if err := m.Flow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quota", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Quota == nil {
				m.Quota = &Quota{}
			}
			if err := m.Quota.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatelimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRatelimit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRatelimit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRatelimit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRatelimit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRatelimit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRatelimit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRatelimit = fmt.Errorf("proto: unexpected end of group")
)

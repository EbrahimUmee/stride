// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/stakeibc/lsm.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LSMDepositStatus int32

const (
	TRANSFER_IN_PROGRESS       LSMDepositStatus = 0
	TRANSFER_FAILED            LSMDepositStatus = 1
	DETOKENIZATION_QUEUE       LSMDepositStatus = 2
	DETOKENIZATION_IN_PROGRESS LSMDepositStatus = 3
	DETOKENIZATION_FAILED      LSMDepositStatus = 4
)

var LSMDepositStatus_name = map[int32]string{
	0: "TRANSFER_IN_PROGRESS",
	1: "TRANSFER_FAILED",
	2: "DETOKENIZATION_QUEUE",
	3: "DETOKENIZATION_IN_PROGRESS",
	4: "DETOKENIZATION_FAILED",
}

var LSMDepositStatus_value = map[string]int32{
	"TRANSFER_IN_PROGRESS":       0,
	"TRANSFER_FAILED":            1,
	"DETOKENIZATION_QUEUE":       2,
	"DETOKENIZATION_IN_PROGRESS": 3,
	"DETOKENIZATION_FAILED":      4,
}

func (x LSMDepositStatus) String() string {
	return proto.EnumName(LSMDepositStatus_name, int32(x))
}

func (LSMDepositStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e7c113a3a09a2a77, []int{0}
}

type LSMTokenDeposit struct {
	Denom            string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	ChainId          string                                 `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ValidatorAddress string                                 `protobuf:"bytes,3,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Amount           github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	RecordId         uint64                                 `protobuf:"varint,5,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	Status           LSMDepositStatus                       `protobuf:"varint,6,opt,name=status,proto3,enum=stride.stakeibc.LSMDepositStatus" json:"status,omitempty"`
}

func (m *LSMTokenDeposit) Reset()         { *m = LSMTokenDeposit{} }
func (m *LSMTokenDeposit) String() string { return proto.CompactTextString(m) }
func (*LSMTokenDeposit) ProtoMessage()    {}
func (*LSMTokenDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7c113a3a09a2a77, []int{0}
}
func (m *LSMTokenDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LSMTokenDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LSMTokenDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LSMTokenDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LSMTokenDeposit.Merge(m, src)
}
func (m *LSMTokenDeposit) XXX_Size() int {
	return m.Size()
}
func (m *LSMTokenDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_LSMTokenDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_LSMTokenDeposit proto.InternalMessageInfo

func (m *LSMTokenDeposit) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *LSMTokenDeposit) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *LSMTokenDeposit) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *LSMTokenDeposit) GetRecordId() uint64 {
	if m != nil {
		return m.RecordId
	}
	return 0
}

func (m *LSMTokenDeposit) GetStatus() LSMDepositStatus {
	if m != nil {
		return m.Status
	}
	return TRANSFER_IN_PROGRESS
}

type LSMLiquidStake struct {
	Staker   string     `protobuf:"bytes,1,opt,name=staker,proto3" json:"staker,omitempty"`
	LsmToken types.Coin `protobuf:"bytes,2,opt,name=lsm_token,json=lsmToken,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"lsm_token"`
}

func (m *LSMLiquidStake) Reset()         { *m = LSMLiquidStake{} }
func (m *LSMLiquidStake) String() string { return proto.CompactTextString(m) }
func (*LSMLiquidStake) ProtoMessage()    {}
func (*LSMLiquidStake) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7c113a3a09a2a77, []int{1}
}
func (m *LSMLiquidStake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LSMLiquidStake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LSMLiquidStake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LSMLiquidStake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LSMLiquidStake.Merge(m, src)
}
func (m *LSMLiquidStake) XXX_Size() int {
	return m.Size()
}
func (m *LSMLiquidStake) XXX_DiscardUnknown() {
	xxx_messageInfo_LSMLiquidStake.DiscardUnknown(m)
}

var xxx_messageInfo_LSMLiquidStake proto.InternalMessageInfo

func (m *LSMLiquidStake) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

func (m *LSMLiquidStake) GetLsmToken() types.Coin {
	if m != nil {
		return m.LsmToken
	}
	return types.Coin{}
}

func init() {
	proto.RegisterEnum("stride.stakeibc.LSMDepositStatus", LSMDepositStatus_name, LSMDepositStatus_value)
	proto.RegisterType((*LSMTokenDeposit)(nil), "stride.stakeibc.LSMTokenDeposit")
	proto.RegisterType((*LSMLiquidStake)(nil), "stride.stakeibc.LSMLiquidStake")
}

func init() { proto.RegisterFile("stride/stakeibc/lsm.proto", fileDescriptor_e7c113a3a09a2a77) }

var fileDescriptor_e7c113a3a09a2a77 = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x41, 0x8f, 0xd2, 0x40,
	0x14, 0x6e, 0x59, 0x16, 0x61, 0x4c, 0x16, 0x1c, 0xd1, 0x14, 0x4c, 0x0a, 0xee, 0x41, 0x89, 0x66,
	0x3b, 0x61, 0xbd, 0xe8, 0x11, 0xa4, 0x98, 0x66, 0x0b, 0x68, 0xcb, 0x5e, 0xf6, 0xd2, 0xb4, 0x9d,
	0x09, 0x3b, 0x81, 0x76, 0xb0, 0x33, 0x10, 0xfd, 0x07, 0xde, 0xd4, 0xbb, 0x37, 0x6f, 0xfe, 0x92,
	0x3d, 0xee, 0xd1, 0x78, 0x58, 0x0d, 0xfc, 0x11, 0xd3, 0x69, 0x5d, 0x37, 0x9c, 0xf6, 0x34, 0xf3,
	0xde, 0xf7, 0xbd, 0x97, 0xf7, 0xbd, 0xef, 0x81, 0x06, 0x17, 0x09, 0xc5, 0x04, 0x71, 0xe1, 0xcf,
	0x09, 0x0d, 0x42, 0xb4, 0xe0, 0x91, 0xb1, 0x4c, 0x98, 0x60, 0xb0, 0x9a, 0x41, 0xc6, 0x3f, 0xa8,
	0xa9, 0x87, 0x8c, 0x47, 0x8c, 0xa3, 0xc0, 0xe7, 0x04, 0xad, 0xbb, 0x01, 0x11, 0x7e, 0x17, 0x85,
	0x8c, 0xc6, 0x59, 0x41, 0xb3, 0x3e, 0x63, 0x33, 0x26, 0xbf, 0x28, 0xfd, 0x65, 0xd9, 0xc3, 0xcf,
	0x05, 0x50, 0xb5, 0xdd, 0xd1, 0x94, 0xcd, 0x49, 0x3c, 0x20, 0x4b, 0xc6, 0xa9, 0x80, 0x75, 0xb0,
	0x8f, 0x49, 0xcc, 0x22, 0x4d, 0x6d, 0xab, 0x9d, 0x8a, 0x93, 0x05, 0xb0, 0x01, 0xca, 0xe1, 0xb9,
	0x4f, 0x63, 0x8f, 0x62, 0xad, 0x20, 0x81, 0x3b, 0x32, 0xb6, 0x30, 0x7c, 0x0e, 0xee, 0xad, 0xfd,
	0x05, 0xc5, 0xbe, 0x60, 0x89, 0xe7, 0x63, 0x9c, 0x10, 0xce, 0xb5, 0x3d, 0xc9, 0xa9, 0x5d, 0x03,
	0xbd, 0x2c, 0x0f, 0x87, 0xa0, 0xe4, 0x47, 0x6c, 0x15, 0x0b, 0xad, 0x98, 0x32, 0xfa, 0xc6, 0xc5,
	0x55, 0x4b, 0xf9, 0x75, 0xd5, 0x7a, 0x32, 0xa3, 0xe2, 0x7c, 0x15, 0x18, 0x21, 0x8b, 0x50, 0x2e,
	0x25, 0x7b, 0x8e, 0x38, 0x9e, 0x23, 0xf1, 0x71, 0x49, 0xb8, 0x61, 0xc5, 0xc2, 0xc9, 0xab, 0xe1,
	0x23, 0x50, 0x49, 0x48, 0xc8, 0x12, 0x9c, 0x0e, 0xb4, 0xdf, 0x56, 0x3b, 0x45, 0xa7, 0x9c, 0x25,
	0x2c, 0x0c, 0x5f, 0x81, 0x12, 0x17, 0xbe, 0x58, 0x71, 0xad, 0xd4, 0x56, 0x3b, 0x07, 0xc7, 0x8f,
	0x8d, 0x9d, 0x75, 0x19, 0xb6, 0x3b, 0xca, 0xf5, 0xba, 0x92, 0xe8, 0xe4, 0x05, 0x87, 0x5f, 0x55,
	0x70, 0x60, 0xbb, 0x23, 0x9b, 0xbe, 0x5f, 0x51, 0xec, 0xa6, 0x74, 0xf8, 0x50, 0x76, 0x9b, 0x93,
	0x24, 0xdf, 0x48, 0x1e, 0xc1, 0x19, 0xa8, 0x2c, 0x78, 0xe4, 0x89, 0x74, 0x79, 0x72, 0x27, 0x77,
	0x8f, 0x1b, 0x46, 0x36, 0xb4, 0x91, 0xda, 0x60, 0xe4, 0x36, 0x18, 0xaf, 0x19, 0x8d, 0xfb, 0x28,
	0x15, 0xfa, 0xe3, 0x77, 0xeb, 0xe9, 0x2d, 0x84, 0xa6, 0x05, 0x4e, 0x79, 0xc1, 0x23, 0x69, 0xcc,
	0xb3, 0x6f, 0x2a, 0xa8, 0xed, 0x0e, 0x0c, 0x35, 0x50, 0x9f, 0x3a, 0xbd, 0xb1, 0x3b, 0x34, 0x1d,
	0xcf, 0x1a, 0x7b, 0x6f, 0x9d, 0xc9, 0x1b, 0xc7, 0x74, 0xdd, 0x9a, 0x02, 0xef, 0x83, 0xea, 0x35,
	0x32, 0xec, 0x59, 0xb6, 0x39, 0xa8, 0xa9, 0x29, 0x7d, 0x60, 0x4e, 0x27, 0x27, 0xe6, 0xd8, 0x3a,
	0xeb, 0x4d, 0xad, 0xc9, 0xd8, 0x7b, 0x77, 0x6a, 0x9e, 0x9a, 0xb5, 0x02, 0xd4, 0x41, 0x73, 0x07,
	0xb9, 0xd9, 0x6e, 0x0f, 0x36, 0xc0, 0x83, 0x1d, 0x3c, 0x6f, 0x5a, 0x6c, 0x16, 0x3f, 0x7d, 0xd7,
	0x95, 0xfe, 0xc9, 0xc5, 0x46, 0x57, 0x2f, 0x37, 0xba, 0xfa, 0x67, 0xa3, 0xab, 0x5f, 0xb6, 0xba,
	0x72, 0xb9, 0xd5, 0x95, 0x9f, 0x5b, 0x5d, 0x39, 0xeb, 0xde, 0xd0, 0xea, 0x4a, 0x07, 0x8e, 0x6c,
	0x3f, 0xe0, 0x28, 0xbf, 0xeb, 0xf5, 0x4b, 0xf4, 0xe1, 0xff, 0x71, 0x4b, 0xe9, 0x41, 0x49, 0x1e,
	0xe6, 0x8b, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x18, 0x12, 0x89, 0x91, 0xfc, 0x02, 0x00, 0x00,
}

func (m *LSMTokenDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LSMTokenDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LSMTokenDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintLsm(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.RecordId != 0 {
		i = encodeVarintLsm(dAtA, i, uint64(m.RecordId))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintLsm(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintLsm(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLsm(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LSMLiquidStake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LSMLiquidStake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LSMLiquidStake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LsmToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintLsm(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLsm(dAtA []byte, offset int, v uint64) int {
	offset -= sovLsm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LSMTokenDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLsm(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovLsm(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovLsm(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovLsm(uint64(l))
	if m.RecordId != 0 {
		n += 1 + sovLsm(uint64(m.RecordId))
	}
	if m.Status != 0 {
		n += 1 + sovLsm(uint64(m.Status))
	}
	return n
}

func (m *LSMLiquidStake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovLsm(uint64(l))
	}
	l = m.LsmToken.Size()
	n += 1 + l + sovLsm(uint64(l))
	return n
}

func sovLsm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLsm(x uint64) (n int) {
	return sovLsm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LSMTokenDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LSMTokenDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LSMTokenDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordId", wireType)
			}
			m.RecordId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= LSMDepositStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LSMLiquidStake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LSMLiquidStake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LSMLiquidStake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LsmToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LsmToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLsm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLsm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLsm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLsm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLsm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLsm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLsm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLsm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLsm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLsm = fmt.Errorf("proto: unexpected end of group")
)
